import React, { useState, useEffect } from "react";
import "./Paginate.css";

const Paginate = (props) => {
  // let initialPage = 1;
console.log(props)
  const [state, setState] = useState({
    pager: {},
    sheet: 1,
  });

  const [mount, setMount] = useState(false);

  useEffect(() => {
    if (!mount) {
      setMount(true);
      let page = state.sheet;
      var items = props.items;
      var pager = state.pager;
      if (page < 1 || page > pager.totalPages) {
        return;
      }

      const getPager = (totalItems, currentPage, pageSize) => {
        // default to first page
        currentPage = currentPage || 1;

        // default page size is 10
        pageSize = props.itemsPerPage || 10;

        // calculate total pages
        var totalPages = Math.ceil(totalItems / pageSize);

        var startPage, endPage;
        if (totalPages <= 5) {
          // less than 10 total pages so show all
          startPage = 1;
          endPage = totalPages;
        } else {
          // more than 10 total pages so calculate start and end pages
          if (currentPage <= 3) {
            startPage = 1;
            endPage = 5;
          } else if (currentPage + 2 >= totalPages) {
            startPage = totalPages - 14;
            endPage = totalPages;
          } else {
            startPage = currentPage - 3;
            endPage = currentPage + 2;
          }
        }
        // calculate start and end item indexes
        var startIndex = (currentPage - 1) * pageSize;
        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

        // create an array of pages to ng-repeat in the pager control
        var pages = [...Array(endPage + 1 - startPage).keys()].map(
          (i) => startPage + i
        );

        // return object with all pager properties required by the view
        return {
          totalItems: totalItems,
          currentPage: currentPage,
          pageSize: pageSize,
          totalPages: totalPages,
          startPage: startPage,
          endPage: endPage,
          startIndex: startIndex,
          endIndex: endIndex,
          pages: pages,
        };
      };
      // get new pager object for specified page
      pager = getPager(items.length, page);

      // get new page of items from items array
      var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);

      // update state
      setState({ pager: pager });

      // call change page function in parent component
      props.onChangePage(pageOfItems);
    }
  }, [state.pager, state.sheet, mount, props]);

  const pageSet = (page) => {
    window.scrollTo({ top: 0, behavior: "smooth" });
    props.paginate(page);
    var items = props.items;
    var pager = state.pager;
    if (page < 1 || page > pager.totalPages) {
      return;
    }
    // get new pager object for specified page
    pager = getPager2(items.length, page);

    // get new page of items from items array
    var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);

    // update state
    setState({ pager: pager });
    // call change page function in parent component
    props.onChangePage(pageOfItems);
  };

  const getPager2 = (totalItems, currentPage, pageSize) => {
    // default to first page
    currentPage = currentPage || 1;

    // default page size is 10
    pageSize = props.itemsPerPage || 10;

    // console.log(pageSize, "PAGESIZE")
    // calculate total pages
    var totalPages = Math.ceil(totalItems / pageSize);

    var startPage, endPage;
    console.log(totalPages, "PAGESIZE", endPage);

    if (totalPages <= 5) {
      // less than 10 total pages so show all
      startPage = 1;
      endPage = totalPages;
    } else {
      // more than 10 total pages so calculate start and end pages
      if (currentPage <= 4) {
        startPage = 1;
        endPage = 5;
      } else if (currentPage + 3 >= totalPages) {
        startPage = totalPages - 4;
        endPage = totalPages;
      } else {
        startPage = currentPage - 1;
        endPage = currentPage + 3;
      }
    }

    // calculate start and end item indexes
    var startIndex = (currentPage - 1) * pageSize;
    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

    // create an array of pages to ng-repeat in the pager control
    var pages = [...Array(endPage + 1 - startPage).keys()].map(
      (i) => startPage + i
    );

    // return object with all pager properties required by the view
    return {
      totalItems: totalItems,
      currentPage: currentPage,
      pageSize: pageSize,
      totalPages: totalPages,
      startPage: startPage,
      endPage: endPage,
      startIndex: startIndex,
      endIndex: endIndex,
      pages: pages,
    };
  };

  let pager = state.pager;

  if (!pager.pages || pager.pages.length <= 1) {
    // don't display pager if there is only 1 page
    return null;
  }

  return (
    <>
      <div className="main_ul_div">
        <div>
          <div className="pagination_div">
            <ul className="pagination2">
              <li>
                {pager.currentPage !== 1 ? (
                  <button onClick={() => pageSet(pager.currentPage - 1)}>
                    Prev
                  </button>
                ) : (
                  <button>Prev</button>
                )}
              </li>
              <li>
                <button onClick={() => pageSet(1)}>First</button>
              </li>
              <li>
                <button onClick={() => pageSet(pager.totalPages)}>Last</button>
              </li>
              <li>
                {pager.currentPage !== pager.totalPages ? (
                  <button onClick={() => pageSet(pager.currentPage + 1)}>
                    Next
                  </button>
                ) : (
                  <button>Next</button>
                )}
              </li>
            </ul>
          </div>

          <div className="pagination_div">
            <ul className="pagination">
              {/* 
    <li className={pager.currentPage === 1 ? "disabled" : ""}>
        <button onClick={() => pageSet(pager.currentPage - 1)}>Previous</button>
      </li>
<li className={pager.currentPage === 1 ? "disabled" : ""}>
        <button onClick={() => pageSet(1)}>First</button>
      </li> */}

              {pager.pages.map((page, index) => (
                <li
                  key={index}
                  className={pager.currentPage === page ? "active" : ""}
                >
                  <button
                    className="page_number_btn"
                    onClick={() => pageSet(page)}
                  >
                    {page}
                  </button>
                </li>
              ))}
              {/* 
<li className={pager.currentPage === pager.totalPages ? "disabled" : ""}>
        <button onClick={() => pageSet(pager.totalPages)}>Last</button>
      </li>
<li className={pager.currentPage === pager.totalPages ? "disabled" : ""}>
        <button onClick={() => pageSet(pager.currentPage + 1)}>Next</button>
      </li> */}
            </ul>
          </div>
        </div>
      </div>
    </>
  );
};

export default Paginate;
